rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Users collection rules
    match /users/{userId} {
      // Users can read their own profile information.
      allow read: if request.auth != null && request.auth.uid == userId;

      // An update is allowed if:
      // 1. A user is updating their own info, BUT NOT their role.
      // 2. The user is a 'master-admin' (who can change anything).
      allow update: if request.auth != null &&
                       (
                         (request.auth.uid == userId && request.resource.data.role == resource.data.role) ||
                         (getUserRole(request.auth.uid) == 'master-admin')
                       );

      // Disallow users from creating their own profile to prevent role manipulation.
      // Creation should be handled by a trusted backend (e.g., Cloud Function).
      allow create: if false;
    }

    // daily_ships collection rules
    match /daily_ships/{document=**} {
      // All authenticated users can read ship data.
      allow read: if request.auth != null;

      // Only users with 'admin' or 'operator' roles can write (create, update, delete).
      allow write: if request.auth != null && (getUserRole(request.auth.uid) == 'admin' || getUserRole(request.auth.uid) == 'operator');
    }

    // Default rule: Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}